"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4943],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,u=d["".concat(i,".").concat(h)]||d[h]||m[h]||l;return n?o.createElement(u,r(r({ref:t},p),{},{components:n})):o.createElement(u,r({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<l;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9942:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const l={id:"scrollables",title:"Scrollables",description:"Bottom Sheet scrollables.",keywords:["bottomsheet","bottom-sheet","bottom sheet","react-native","react native","ios","android","sheet","modal","presentation modal","reanimated"],image:"/img/bottom-sheet-preview.gif",slug:"/scrollables"},r=void 0,s={unversionedId:"scrollables",id:"version-2/scrollables",title:"Scrollables",description:"Bottom Sheet scrollables.",source:"@site/versioned_docs/version-2/scrollables.md",sourceDirName:".",slug:"/scrollables",permalink:"/awesome-react-native/2/scrollables",draft:!1,editUrl:"https://github.com/gorhom/react-native-bottom-sheet/edit/website/versioned_docs/version-2/scrollables.md",tags:[],version:"2",frontMatter:{id:"scrollables",title:"Scrollables",description:"Bottom Sheet scrollables.",keywords:["bottomsheet","bottom-sheet","bottom sheet","react-native","react native","ios","android","sheet","modal","presentation modal","reanimated"],image:"/img/bottom-sheet-preview.gif",slug:"/scrollables"},sidebar:"version-2/packages",previous:{title:"Hooks",permalink:"/awesome-react-native/2/hooks"},next:{title:"Custom Handle",permalink:"/awesome-react-native/2/custom-handle"}},i={},c=[{value:"BottomSheetFlatList",id:"bottomsheetflatlist",level:2},{value:"Props",id:"props",level:4},{value:"<code>focusHook</code>",id:"focushook",level:5},{value:"Example",id:"example",level:4},{value:"BottomSheetSectionList",id:"bottomsheetsectionlist",level:2},{value:"Props",id:"props-1",level:4},{value:"<code>focusHook</code>",id:"focushook-1",level:5},{value:"Example",id:"example-1",level:4},{value:"BottomSheetScrollView",id:"bottomsheetscrollview",level:2},{value:"Props",id:"props-2",level:4},{value:"<code>focusHook</code>",id:"focushook-2",level:5},{value:"Example",id:"example-2",level:4},{value:"BottomSheetView",id:"bottomsheetview",level:2},{value:"Props",id:"props-3",level:4},{value:"<code>focusHook</code>",id:"focushook-3",level:5},{value:"Example",id:"example-3",level:4}],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This library provides a pre-integrated virtualized lists that utilize an internal functionalities with the bottom sheet container to allow smooth panning interactions. These lists I called them Scrollables and they are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#bottomsheetflatlist"},"BottomSheetFlatList")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#bottomsheetsectionlist"},"BottomSheetSectionList")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#bottomsheetscrollview"},"BottomSheetScrollView")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#bottomsheetview"},"BottomSheetView"))),(0,a.kt)("h2",{id:"bottomsheetflatlist"},"BottomSheetFlatList"),(0,a.kt)("p",null,"An extended component of ",(0,a.kt)("inlineCode",{parentName:"p"},"FlatList")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"react-native"),", with bottom sheet integrations."),(0,a.kt)("h4",{id:"props"},"Props"),(0,a.kt)("h5",{id:"focushook"},(0,a.kt)("inlineCode",{parentName:"h5"},"focusHook")),(0,a.kt)("p",null,"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide ",(0,a.kt)("inlineCode",{parentName:"p"},"useFocusEffect")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"@react-navigation/native"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"type"),(0,a.kt)("th",{parentName:"tr",align:null},"default"),(0,a.kt)("th",{parentName:"tr",align:null},"required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"React.useEffect")),(0,a.kt)("td",{parentName:"tr",align:null},"NO")))),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useCallback, useRef, useMemo } from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport BottomSheet, { BottomSheetFlatList } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => ['25%', '50%', '90%'], []);\n\n  // callbacks\n  const handleSheetChange = useCallback(index => {\n    console.log('handleSheetChange', index);\n  }, []);\n  const handleSnapPress = useCallback(index => {\n    sheetRef.current?.snapTo(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetFlatList\n          data={data}\n          keyExtractor={i => i}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n        />\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: 'white',\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: '#eee',\n  },\n});\n\nexport default App;\n")),(0,a.kt)("h2",{id:"bottomsheetsectionlist"},"BottomSheetSectionList"),(0,a.kt)("p",null,"Is an extended component of ",(0,a.kt)("inlineCode",{parentName:"p"},"SectionList")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"react-native"),", with bottom sheet integrations."),(0,a.kt)("h4",{id:"props-1"},"Props"),(0,a.kt)("h5",{id:"focushook-1"},(0,a.kt)("inlineCode",{parentName:"h5"},"focusHook")),(0,a.kt)("p",null,"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide ",(0,a.kt)("inlineCode",{parentName:"p"},"useFocusEffect")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"@react-navigation/native"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"type"),(0,a.kt)("th",{parentName:"tr",align:null},"default"),(0,a.kt)("th",{parentName:"tr",align:null},"required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"React.useEffect")),(0,a.kt)("td",{parentName:"tr",align:null},"NO")))),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useCallback, useRef, useMemo } from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport BottomSheet, { BottomSheetSectionList } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const sections = useMemo(\n    () =>\n      Array(10)\n        .fill(0)\n        .map((_, index) => ({\n          title: `Section ${index}`,\n          data: Array(10)\n            .fill(0)\n            .map((_, index) => `Item ${index}`),\n        })),\n    []\n  );\n  const snapPoints = useMemo(() => ['25%', '50%', '90%'], []);\n\n  // callbacks\n  const handleSheetChange = useCallback(index => {\n    console.log('handleSheetChange', index);\n  }, []);\n  const handleSnapPress = useCallback(index => {\n    sheetRef.current?.snapTo(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderSectionHeader = useCallback(\n    ({ section }) => (\n      <View style={styles.sectionHeaderContainer}>\n        <Text>{section.title}</Text>\n      </View>\n    ),\n    []\n  );\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetSectionList\n          sections={sections}\n          keyExtractor={i => i}\n          renderSectionHeader={renderSectionHeader}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n        />\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: 'white',\n  },\n  sectionHeaderContainer: {\n    backgroundColor: 'white',\n    padding: 6,\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: '#eee',\n  },\n});\n\nexport default App;\n")),(0,a.kt)("h2",{id:"bottomsheetscrollview"},"BottomSheetScrollView"),(0,a.kt)("p",null,"Is an extended component of ",(0,a.kt)("inlineCode",{parentName:"p"},"ScrollView")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"react-native"),", with bottom sheet integrations."),(0,a.kt)("h4",{id:"props-2"},"Props"),(0,a.kt)("h5",{id:"focushook-2"},(0,a.kt)("inlineCode",{parentName:"h5"},"focusHook")),(0,a.kt)("p",null,"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide ",(0,a.kt)("inlineCode",{parentName:"p"},"useFocusEffect")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"@react-navigation/native"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"type"),(0,a.kt)("th",{parentName:"tr",align:null},"default"),(0,a.kt)("th",{parentName:"tr",align:null},"required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"React.useEffect")),(0,a.kt)("td",{parentName:"tr",align:null},"NO")))),(0,a.kt)("h4",{id:"example-2"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useCallback, useRef, useMemo } from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport BottomSheet, { BottomSheetScrollView } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => ['25%', '50%', '90%'], []);\n\n  // callbacks\n  const handleSheetChange = useCallback(index => {\n    console.log('handleSheetChange', index);\n  }, []);\n  const handleSnapPress = useCallback(index => {\n    sheetRef.current?.snapTo(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    item => (\n      <View key={item} style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetScrollView\n          contentContainerStyle={styles.contentContainer}\n        >\n          {data.map(renderItem)}\n        </BottomSheetScrollView>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: 'white',\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: '#eee',\n  },\n});\n\nexport default App;\n")),(0,a.kt)("h2",{id:"bottomsheetview"},"BottomSheetView"),(0,a.kt)("p",null,"Is an extended component of ",(0,a.kt)("inlineCode",{parentName:"p"},"View")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"react-native"),", with bottom sheet integrations."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This only needed when the bottom sheet used with ",(0,a.kt)("inlineCode",{parentName:"p"},"React Navigation"),".")),(0,a.kt)("h4",{id:"props-3"},"Props"),(0,a.kt)("h5",{id:"focushook-3"},(0,a.kt)("inlineCode",{parentName:"h5"},"focusHook")),(0,a.kt)("p",null,"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide ",(0,a.kt)("inlineCode",{parentName:"p"},"useFocusEffect")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"@react-navigation/native"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"type"),(0,a.kt)("th",{parentName:"tr",align:null},"default"),(0,a.kt)("th",{parentName:"tr",align:null},"required"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"React.useEffect")),(0,a.kt)("td",{parentName:"tr",align:null},"NO")))),(0,a.kt)("h4",{id:"example-3"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useCallback, useRef, useMemo } from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport BottomSheet, { BottomSheetView } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => ['25%', '50%', '90%'], []);\n\n  // callbacks\n  const handleSheetChange = useCallback(index => {\n    console.log('handleSheetChange', index);\n  }, []);\n  const handleSnapPress = useCallback(index => {\n    sheetRef.current?.snapTo(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    item => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetView style={styles.contentContainer}>\n          {data.map(renderItem)}\n        </BottomSheetView>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: 'white',\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: '#eee',\n  },\n});\n\nexport default App;\n")))}m.isMDXComponent=!0}}]);